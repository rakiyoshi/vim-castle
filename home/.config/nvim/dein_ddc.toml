# ddc
[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['context_filetype.vim', 'pum.vim']
on_event = 'InsertEnter'
hook_source = '''
  source ~/dotfiles/nvim/plugins/ddc.rc.vim
'''

[[plugins]]
repo = 'Shougo/pum.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'
on_event = 'BufRead'

[[plugins]]
repo = 'Shougo/neco-vim'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-zsh'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-dictionary'
on_source = 'ddc.vim'

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
if = "has('nvim')"
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-buffer'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-ultisnips'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-filter_editdistance'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-converter_truncate'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-nvim-lsp-doc'
if = "has('nvim')"
on_source = 'ddc.vim'
hook_source = '''
  let g:ddc_nvim_lsp_doc_config = {
        \ 'documentation': {
        \   'enable': v:false,
        \ },
        \ 'signature': {
        \   'border': 'rounded',
        \ },
        \ }
  call ddc_nvim_lsp_doc#enable()
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
# if = "!has('nvim')"
hook_source = '''
	let g:popup_preview_config = {
	      \ 'delay': 30,
        \ 'maxWidth': 100,
        \ 'winblend': 0,
	      \ }
  call popup_preview#enable()
  let g:markdown_fenced_languages = ['ts=typescript']
'''

[[plugins]]
repo = 'ray-x/lsp_signature.nvim'
if = "has('nvim')"
hook_add = '''
  command! LspSigEnable call ddc_nvim_lsp_doc#disable() | lua require("lsp_signature").setup()
'''

[[plugins]]
repo = 'shun/ddc-vim-lsp'
on_source = 'ddc.vim'
if = "!has('nvim')"

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
depends = ['vim-vsnip-integ', 'friendly-snippets']
on_event = 'InsertEnter'
hook_add = '''
" Expand
imap <expr> <C-l> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-l>'
smap <expr> <C-l> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-l>'
" Jump forward or backward
imap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
smap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
imap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
smap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
let g:vsnip_snippet_dir = expand('~/dotfiles/nvim/snippets')
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'

[[plugins]]
repo = 'rafamadriz/friendly-snippets'

[[plugins]]
repo = 'kuuote/denops-skkeleton.vim'
on_source = 'ddc.vim'
on_map = {ic = '<plug>(skkeleton-'}
hook_add = '''
  imap <C-j> <Plug>(skkeleton-toggle)
  cmap <C-j> <Plug>(skkeleton-toggle)
  function! s:skkeleton_init() abort
    call skkeleton#config({
      \ 'userJisyo': expand('~/.cache/skkeleton')
      \ })
    call skkeleton#register_kanatable('rom', {
      \ "z\<Space>": ["\u3000", ''],
      \ 'jj': 'escape',
      \ 'z,': ['，', ''],
      \ 'z9': ['（', ''],
      \ 'z0': ['）', ''],
      \ })
    if has('win32') || has('win64')
      call skkeleton#config({
        \ 'globalJisyo': expand('~/AppData/Local/skk/SKK-JISYO.L')
        \ })
    endif
  endfunction
  autocmd User skkeleton-initialize-pre call s:skkeleton_init()
'''
