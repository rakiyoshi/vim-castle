# hookの種類
#
# |   hookの名前   |            実行されるタイミング            |lazy OFF|lazy ON|
# |----------------|--------------------------------------------|--------|-------|
# |hook_add        |プラグインが dein.vim によって追加されたとき|OK      |OK     |
# |hook_source     |プラグインが読み込まれる直前                |NG      |OK     |
# |hook_post_source|プラグインが読み込まれた直後                |NG      |OK     |
# |hook_post_update|プラグインが更新された直後                  |OK      |OK     |
# |hook_done_update|プラグイン全ての更新が終わった直後          |OK      |OK     |
#
# 参考: https://qiita.com/delphinus/items/cd221a450fd23506e81a


# 補完
# Deno
[[plugins]]
repo = 'vim-denops/denops.vim'

# ddc
[[plugins]]
repo = 'Shougo/ddc.vim'
hook_post_update = '''
" Customize global settings
" Use around source.
" https://github.com/Shougo/ddc-around
call ddc#custom#patch_global('sources', ['around'])

" Use matcher_head and sorter_rank.
" https://github.com/Shougo/ddc-matcher_head
" https://github.com/Shougo/ddc-sorter_rank
call ddc#custom#patch_global('sourceOptions', {
      \ '_': {
      \   'matchers': ['matcher_head'],
      \   'sorters': ['sorter_rank']},
      \ })

" Change source options
call ddc#custom#patch_global('sourceOptions', {
      \ 'around': {'mark': 'A'},
      \ })
call ddc#custom#patch_global('sourceParams', {
      \ 'around': {'maxSize': 500},
      \ })

" Customize settings on a filetype
call ddc#custom#patch_filetype(['c', 'cpp'], 'sources', ['around', 'clangd'])
call ddc#custom#patch_filetype(['c', 'cpp'], 'sourceOptions', {
      \ 'clangd': {'mark': 'C'},
      \ })
call ddc#custom#patch_filetype('markdown', 'sourceParams', {
      \ 'around': {'maxSize': 100},
      \ })

" Mappings

" <TAB>: completion.
inoremap <silent><expr> <TAB>
\ pumvisible() ? "\<C-n>" :
\ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
\ "\<TAB>" : ddc#manual_complete()

" <S-TAB>: completion back.
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"

" Use ddc.
call ddc#enable()
'''

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add='''
let g:lsp_signs_enabled = 1         " enable signs
let g:lsp_diagnostics_echo_cursor = 1 " enable echo under cursor when in normal mode

let g:lsp_signs_error = {'text': '✗'}
let g:lsp_signs_warning = {'text': '‼'}

" let g:lsp_log_file = expand("~/.vim/vim-lsp.log")
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
hook_add='''
let g:lsp_settings_servers_dir = expand('~/.local/share/vim-lsp-settings/servers')
let g:lsp_settings_filetype_terraform = 'terraform-ls'
let g:lsp_settings = {
\ 'terraform-ls': {
\   'cmd': ['terraform-ls', 'serve']
\ },
\ 'efm-langserver': {
\   'disables': v:false
\ },
\ 'yaml-language-server': {
\   'workspace_config': {
\     'yaml': {
\       'customTags': [
\         "!And scalar",
\         "!And mapping",
\         "!And sequence",
\         "!If scalar",
\         "!If mapping",
\         "!If sequence",
\         "!Not scalar",
\         "!Not mapping",
\         "!Not sequence",
\         "!Equals scalar",
\         "!Equals mapping",
\         "!Equals sequence",
\         "!Or scalar",
\         "!Or mapping",
\         "!Or sequence",
\         "!FindInMap scalar",
\         "!FindInMap mappping",
\         "!FindInMap sequence",
\         "!Base64 scalar",
\         "!Base64 mapping",
\         "!Base64 sequence",
\         "!Cidr scalar",
\         "!Cidr mapping",
\         "!Cidr sequence",
\         "!Ref scalar",
\         "!Ref mapping",
\         "!Ref sequence",
\         "!Sub scalar",
\         "!Sub mapping",
\         "!Sub sequence",
\         "!GetAtt scalar",
\         "!GetAtt mapping",
\         "!GetAtt sequence",
\         "!GetAZs scalar",
\         "!GetAZs mapping",
\         "!GetAZs sequence",
\         "!ImportValue scalar",
\         "!ImportValue mapping",
\         "!ImportValue sequence",
\         "!Select scalar",
\         "!Select mapping",
\         "!Select sequence",
\         "!Split scalar",
\         "!Split mapping",
\         "!Split sequence",
\         "!Join scalar",
\         "!Join mapping",
\         "!Join sequence",
\       ],
\     },
\   },
\ }
\}
autocmd BufWritePre *.ts,*.tsx call execute('LspDocumentFormatSync')
'''


# Dein
[[plugins]]
repo = 'Shougo/dein.vim'


# Denite
# 参考:
# https://zaief.jp/vim/denite/
# https://github.com/Shougo/denite.nvim/blob/master/doc/denite.txt
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
" Define mappings
nnoremap <silent> ,f :<C-u>DeniteProjectDir file/rec<CR>
nnoremap <silent> ,g :<C-u>DeniteProjectDir grep<CR>
nnoremap <silent> ,b :<C-u>DeniteProjectDir buffer<CR>
nnoremap <silent> ,l :<C-u>DeniteProjectDir line<CR>

" Define denite key mappings
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
  \ denite#do_map('toggle_select').'j'
endfunction

autocmd FileType define-fillter cll s:denite_filter_my_settings()
function! s:denite_filter_my_settings() abort
  imap <silent><buffer> <C-o> <Plug>(denite_filter_quit)
endfunction

" Change file/rec command.
call denite#custom#var('file/rec', 'command',
\ ['ag', '--hidden',  '--follow', '--nocolor', '--nogroup', '-g', ''])

" Ag command on grep source
call denite#custom#var('grep', {
  \ 'command': ['ag'],
  \ 'recursive_opts': [],
  \ 'pattern_opt': [],
  \ 'default_opts': ['--follow', '--nogroup', '--nocolor']
  \ })

" Define aliases
call denite#custom#alias('source', 'file/rec/git', 'file/rec')
call denite#custom#var('file/rec/git', 'command',
  \ ['git', 'ls-files', '-co', '--exclude-standard'])

" Change default action. use split when opening file
call denite#custom#kind('file', 'default_action', 'split')

" Change default action. use floating
let s:denite_win_width_percent = 0.85
let s:denite_win_height_precent = 0.7
let s:denite_default_options = {
  \ 'split': 'floating',
  \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
  \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
  \ 'winheight': float2nr(&lines * s:denite_win_height_precent),
  \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_precent)) / 2),
  \ 'highlight_filter_background': 'DeniteFilter',
  \ 'prompt': '$ ',
  \ 'start_filter': v:true,
  \ }
call denite#custom#option('default', s:denite_default_options)
'''


# Lint
[[plugins]]
repo = 'vim-syntastic/syntastic'
hook_add = '''
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_yaml_checkers = ['yamllint']
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': ['ruby'] }
let g:syntastic_ruby_checkers = ['rubocop']
let g:syntastic_typescript_checkers = ['eslint']
'''

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
let g:indentLine_char = '¦'
set conceallevel=0
'''

[[plugins]]
repo    = 'vim-airline/vim-airline'
depends = ['vim-airline-themes']
hook_add = '''
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#readonly#enabled = 0
let airline_section_b = '%t %M'
let s:sep = " %{get(g:, 'airline_right_alt_sep', '')} "
let g:airline_section_y = '%3p%%'
let g:airline_section_z = get(g:, 'airline_linecolumn_prefix', '').'%3l:%-2v'
let g:airline#extensions#whitespace#enabled = 0
'''

# Theme
[[plugins]]
repo = 'vim-airline/vim-airline-themes'
hook_add = '''
let g:airline_theme = 'molokai'
'''

[[plugins]]
repo = 'tomasr/molokai'

# gitを操作
[[plugins]]
repo = 'tpope/vim-fugitive'


# NerdTree
[[plugins]]
repo = 'preservim/nerdtree'
hook_add = '''
let NERDTreeShowHidden=1
"他のバッファをすべて閉じた時にNERDTreeが開いていたらNERDTreeも一緒に閉じる。
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
'''

# TOML
[[plugins]]
repo = 'cespare/vim-toml'
